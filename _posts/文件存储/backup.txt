* 命令模式（需要将"行为请求者"与"行为实现者"解耦，将一组行为抽象为对象，可以实现二者之间的松耦合。）

  **目的：**将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。

  **实现方式：**将一个请求封装成一个对象

  

  ***

  

* 备忘录模式（额外记录对象某一状态做备份，以便恢复）

  **目的：**在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。

  **实现方式：**构造实体类（包含另存当前状态以及取出给定实体类状态的方法），构造存储多重状态（状态数组）的方法，两者结合以同属存储状态以及状态历史。

  

* 迭代器模式（遍历一个聚合对象）*迭代器原理*

  **目的：**提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。

  **实现方式：**构造迭代器类包含数组（可导入）以及迭代方法hasNext()与next()

  

* 解释器模式（如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子）

  **目的：**给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。

  **实现方式：** *示例代码有误* 

  

* 模板模式（抽象通用方法为模板）

  **目的：**定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即**可重定义**该算法的某些特定步骤。

  **实现方式：** *单纯抽象*

